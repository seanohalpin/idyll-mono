[header]
[img src:"images/logo.png" className:"logo" /]
Introducing Idyll

[a href:"https://twitter.com/mathisonian"]Matthew Conlen[/a]
[/header]

[section]

Idyll is a tool that makes it easier to create interactive documents.
The goal of the project is to provide a friendly
markup language — and an associated toolchain —
that can be used to produce data-driven articles.

Idyll lowers the barrier to entry for
individuals to create documents that use common narrative techniques
such as embedding interactive charts and graphs,
scrollytelling, slideshows, and more. Additionally,
its readable format facilitates
collaboration between writers, editors, designers,
and programmers on complex projects.

Idyll will take a text file and turn it into
an interactive webpage. Here is a simple example:

```
# This is a title

This is an Idyll file. Write text as you please in here.

[Chart type:"line" data:exampleData /]
```

This will produce a header, some body text,
and a line chart.

[data name:"exampleLine" source:"example-line" /]
[Chart type:"line" data:exampleLine className:"inset" /]

The project is inspired by markdown, and
supports a subset of commonly used markdown
syntax, for example using a `#` pound sign
to denote headers, using three backticks to
display code, and using stars to display inline **bold** and *italics*.

In addition to being able to render static text,
Idyll can output interactive components.
These components can be driven by datasets and
be responsive to reader input.

For an example of a more complicated Idyll file,
see the [link href:"https://github.com/idyll-lang/idyll/blob/master/examples/introduction/index.idl" text:"source for this page" /].

Here are some other useful links:

[ul]
[li][link href:"https://github.com/idyll-lang/idyll" text:"Github Repo" /][/li]
[li][link href:"https://idyll-lang.github.io/idyll/scroll/" text:"Scrolly Example" /][/li]
[/ul]

If you just want to learn how to install and start using Idyll, scroll to the bottom of this
page.

## Components


A component can be invoked in one of two ways. It can be self
closing,

```
[Range min:0 max:10 value:value /]
```

[var name:"rangevar" value:5 /]

[inset]
[Range min:0 max:10 value:rangevar /]
[/inset]

or have a closing and opening tag.

```
[Button]
Click Me
[/Button]
```

[Inset]
[Button]
Click Me
[/Button]
[/Inset]

### Component Properties

Properties can be passed into components
in the following ways:

#### Number, String

Numbers or string literals may be used.

```
[Component propName:10 /]
[Component propName:"propValue" /]
```

#### Variable or Dataset

A variable or dataset can be passed in directly, this will
automatically create a binding between that variable and property,
more on this later.

```
[Component propName:myVar /]
```

#### Expression

Use backticks to pass an evaluated expression:

```
[Component propName:`2 * 2 * 2` /]
[Component propName:`{ an: "object" }` /]
```

If the property expects a function,
the expression will automatically be
converted to a callback. This is convenient
for updating variables on events, for example.

```
[Component onClick:`myVar++` /]
```

### Built-In Components

Idyll ships with a variety of components that
you can use without digging in to any JavaScript
code. Find a sample of available components below.

```
// A button, as seen above
[Button][/Button]

// A range slider
[Range /]

// A link to another webpage
[Link /]

// A chart, pass in type
// to specify line, scatter, or bar
[Chart /]

// Dynamic slideshow
[Slideshow]
  [Slide][/Slide]
[/Slideshow]

// Display the value of a variable
// or dataset
[DisplayVar /]
```

Additionally there are some components provided that
help with page layout.

```
[Section]
This text is in its own section
[/Section]

[Inline]These two components[/Inline]
[Inline]will be displayed without a line break.[/Inline]

[Fixed]
Contents inside of a fixed tag will stay on the page
even when a user scrolls.
[/Fixed]
```

## Datasets and Variables

In addition to components, Idyll supports datasets and variables.
These are declared similarly to components.

```
[var name:"myVar" value:5 /]
[data name:"myDataset" source:"data.json" /]
```

The above code declares a variable `myVar` and initializes it
with the value 5. It also imports a dataset from a JSON file.

### Variables

A variable is initialized with a value, and can be used as an input to a component.
For example, the following code declares a variable `myVar`, and uses
it as input to two components.

```
[var name:"myVar" value:5 /]
[Range min:0 max:10 value:myVar /]
[DisplayVar var:myVar /]
```

Idyll handles all of the updating and rerendering of components for you,
so when someone interacts with the range slider, the display will be updated
automatically!

[var name:"myVar" value:5 /]

[inset]
[Range min:0 max:10 value:myVar /]
[DisplayVar var:myVar /]
[/inset]

### Datasets

Datasets are just like variables, except instead of receiving
an initial value, they expect a filename. The following code
would load a dataset and use it to display a chart.

```
[data name:"fourPoints" source:"four-points.json" /]
[Chart type:"scatter" data:fourPoints /]
```

[data name:"fourPoints" source:"four-points" /]
[Chart type:"scatter" data:fourPoints className:"inset" /]

## Interactivity

By combining the methods shown above,
Idyll can be used to create rich,
interactive documents.

As an example, I'll show how
to create buttons that allow a reader
to display different datasets on
a single scatter plot.

To do this, first load the relevant
datasets, and then declare a variable.
We will use the variable to toggle
which dataset is being displayed:

```
[data name:"quartet" source:"quartet.json" /]
[var name:"dataset" value:`quartet[0]` /]
```

and to update the variable we can
add buttons:

```
[Button onClick:`dataset = quartet[0]`]Dataset 1[/Button]
[Button onClick:`dataset = quartet[1]`]Dataset 2[/Button]
[Button onClick:`dataset = quartet[2]`]Dataset 3[/Button]
[Button onClick:`dataset = quartet[3]`]Dataset 4[/Button]
```

We can then use the variable to power the
input to a chart.


```
[Chart type:"scatter" data:dataset /]
```

[data name:"quartet" source:"quartet" /]
[var name:"dataset" value:`quartet[0]` /]

which gives the output:

[inset]
[Chart type:"scatter" data:dataset /]

[Button onClick:`dataset = quartet[0]`]Dataset 1[/Button]
[Button onClick:`dataset = quartet[1]`]Dataset 2[/Button]
[Button onClick:`dataset = quartet[2]`]Dataset 3[/Button]
[Button onClick:`dataset = quartet[3]`]Dataset 4[/Button]
[/inset]

[br/]
You may recognize this data as [link href:"https://en.wikipedia.org/wiki/Anscombe's_quartet" text:"Anscombe's quartet" /].

Additionally we can add an arbitrary JavaScript expression in the click
handlers to do more complex things. The following example
has a button that will either add a random point to a line,
or randomize all of the points along that line.

[var name:"random" value:`[0, 1]` /]

[inset]
[Chart type:"line" data:random className:"inset" /]

[Button onClick:`random.push(Math.random())`]
  Add Point
[/Button]

[Button onClick:`random = (Array(random.length).fill()).map(Math.random)`]
  Randomize
[/Button]
[/inset]

```
[var name:"points" value:`[0, 1]` /]

[Button onClick:`points.push(Math.random())`]
  Add Point
[/Button]

[Button onClick:`points = (Array(points.length).fill()).map(Math.random)`]
  Randomize
[/Button]

[Chart type:"line" data:points className:"inset" /]
```

## Refs

Idyll exposes the `ref` property to allow you to refer to specific components in
property expressions.

```
[Component ref:"thisComponent" propName:`refs.thisComponent`  /]
```

The ref property allows you to update the state of one component based on another. Idyll
provides some utilities automatically, for example keeping track of the position
of a component on the page, and how far through a component's content the reader has
scrolled.

Each ref object has the following properties:

```
{
  scrollProgress: {
    x: number,
    y: number
  },
  domNode: node,
  size: {
    x: number,
    y: number
  },
  position: {
    left: number,
    top: number,
    right: number,
    bottom: number
  }
}
```

For example:

```
[section ref:'section' style:`{ opacity: 1 - refs.section.scrollProgress.y }`]

Lorem ipsum...
...
lots of text here
...

[/section]
```

The above code will create a section of text that fades out as the user scrolls to the bottom of it.
`scrollProgress.y` in this case is a value from 0 to 1 that Idyll automatically computes,
providing the percentage that a user has scrolled through a certain component.


## Custom Components

Idyll is designed for people to use their own custom components as well.
Under the hood an Idyll component just needs to be anything that will
function as a React component. If you create a custom component in
JavaScript, point Idyll to the folder where you created it and
everything will just work, no need to worry about compiling, bundling,
or module loading.

For example, this custom component

```
const React = require('react');
const IdyllComponent = require('idyll-component');

class CustomComponent extends IdyllComponent {
  render() {
    return (
      <div {...this.props}>
        This is a custom component
      </div>
    );
  }
}

module.exports = CustomComponent;
```

could be invoked inside of an Idyll file with the
following code:

```
[CustomComponent /]
```

The `IdyllComponent` class adds an
`updateProps` method that is used to keep
variables in sync with the rest of the document, and also
adds a property `onEnteredView` that can be used to
trigger events in scroll-based narratives.

For example, a component can change the value of a
property that it receives, and Idyll will propegate
the change to any bound variables on the page.

```
const React = require('react');
const IdyllComponent = require('idyll-component');

class Incrementer extends IdyllComponent {

  increment() {
    this.updateProps({
      value: this.props.value + 1
    })
  }

  render() {
    return (
      <div onClick={this.increment.bind(this)}>
        Click me.
      </div>
    );
  }
}

module.exports = Incrementer;
```

The `Incrementer` component could then be used as follows:

```
[var name:"clickCount" value:0 /]

[Incrementer value:clickCount /]
[DisplayVar var:clickCount /]
```

[var name:"clickCount" value:0 /]

[Button onClick:`clickCount+=1` ]Click Me.[/Button]
[DisplayVar var:clickCount /]

Notice that even thought the `Incrementer` component doesn't know
anything about the variable `clickCount`, it is still correctly
updated.

Of course, this trivial example could be accomplished using built-in components.

```
[var name:"clickCount" value:0 /]

[Button onClick:`clickCount+=1` ]Click Me.[/Button]
[DisplayVar var:clickCount /]
```

Custom component are meant for times when more complex and custom
code is needed. See the
[link href:"https://idyll-lang.github.io/idyll/scroll/" text:"scroll" /]
example for more info on how to use `onEnteredView`.

### Component Resolution

Components are resolved according to this algorithm

[ol]
[li] If there is a custom component with this name, use it. [/li]
[li] If there is a built-in component with this name, use it. [/li]
[li] If there is a valid HTML tag with this name, use it. [/li]
[li] If none of the above, just use a div, but give it the class of the component name [/li]
[/ol]

So, for example,

```
// Renders `<img />` because it is a valid  HTML tag
[img /]

// Renders `<div class="somethingElse"></div>`,
// assuming a custom component somethingElse doesn't
// exist.
[somethingElse /]`
```

## Using Idyll

There are two ways to get started using Idyll. The simplest way is to
install it from npm, create a new file and start writing:

```
$ npm install -g idyll
$ idyll my-file.idl
```

The `idyll` command will automatically compile everything and load the
interactive page in your web browser.

To use a custom stylesheet, use the `--css` flag.

```
$ idyll my-file.idl --css styles.css
```

Additionally there is a project generator that will help get you set up
using custom components, datasets, and stylesheets. To use the generator:

```
$ npm install -g yo generator-idyll
$ yo idyll
```

### Publishing with Idyll

Idyll includes a tool `idyll-build` that will take in an Idyll file and
output the compiled JavaScript. This can be combined with other
useful tools to quickly generate a webpage.

```
$ npm install -g indexhtmlify
$ idyll my-file.idl --build | indexhtmlify --style styles.css > idyll.html
```

The above command uses `idyll --build` to generate the JavaScript bundle
and [link href:"https://github.com/dominictarr/indexhtmlify/" text:"indexhtmlify" /] to create
an HTML page with the proper script and style tags. You can then publish this HTML
page online via any means that you please.

## Going Forward

Idyll is a very new project, and I'm eager to get feedback. Feel free
to contact me on twitter [link href:"http://twitter.com/mathisonian" text:"@mathisonian" /]
or by email [link href:"mailto:idyll@mathisonian.com" text:"idyll@mathisonian.com" /].

Please be kind as there are still plenty of bugs to fix and improvements to be made.

[/section]
